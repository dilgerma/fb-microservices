management:
   build: fb-management-server
   dockerfile: Dockerfile-rpi
   hostname: eurekaserver
   ports:
   - "8761:88080"
   expose:
   - "8761"
authserver:
   build: fb-auth-server
   container_name: authserver
   ports:
   - "9820:8080"
ui:
   build: fb-web
   dockerfile: Dockerfile-rpi
   ports:
   - "80:8080"
   links:
   - graphite
   - rabbitmq:messaging
   - logstash
   command: java -Djava.security.egd=file:/dev/./urandom -jar /sources/app.jar
   volumes_from: ['lsf']
reportingui:
  build: fb-web-reporting
  dockerfile: Dockerfile-rpi
  ports:
  - "8999:8081"
  links:
  - graphite
  - logstash
  command: java -Djava.security.egd=file:/dev/./urandom -jar /sources/app.jar
  volumes_from: ['lsf']
invoices:
   build: fb-invoices
   dockerfile: Dockerfile-rpi
   expose:
   - "8081"
   links:
   - graphite
   command: java -Djava.security.egd=file:/dev/./urandom -jar /sources/app.jar
   volumes_from: ['lsf']
expenses:
   build: fb-expenses
   dockerfile: Dockerfile-rpi
   expose:
   - "8081"
   links:
   - logstash
   - graphite
   command: java -Djava.security.egd=file:/dev/./urandom -jar /sources/app.jar
   volumes_from: ['lsf']
customers:
   build: fb-customers
   dockerfile: Dockerfile-rpi
   expose:
   - "8081"
   links:
   - logstash
   - graphite
   - rabbitmq:messaging
   command: java -Djava.security.egd=file:/dev/./urandom -jar /sources/app.jar
   volumes_from: ['lsf']
reporting:
   build: fb-reporting
   dockerfile: Dockerfile-rpi
   expose:
   - "8081"
   ports:
   - "9999:8081"
   links:
   - logstash
   - graphite
   command: java -Djava.security.egd=file:/dev/./urandom -jar /sources/app.jar
   volumes_from: ['lsf']
templates:
   build: fb-template
   dockerfile: Dockerfile-rpi
   expose:
   - "8081"
   links:
   - mongo
   - logstash
   - graphite
   command: java -Djava.security.egd=file:/dev/./urandom -jar /sources/app.jar
   volumes_from: ['lsf']
repository:
   build: fb-repository
   dockerfile: Dockerfile-rpi
   expose:
   - "8080"
   command: java -Djava.security.egd=file:/dev/./urandom -jar /sources/app.jar
   volumes_from: ['lsf']
   environment:
   - user_email
   - user_apiKey
#   - spring.profiles.active=mock
   links:
   - graphite
   - rabbitmq:messaging
lsf:
   build: logstash-forwarder
   dockerfile: Dockerfile-rpi
   links:
   - logstash
   volumes:
   - /var/log/
elasticvolume:
   dockerfile: Dockerfile-rpi
   build: elasticsearch-volume
   mem_limit: 4m
elasticsearch:
  user: root
  build: elasticsearch
  dockerfile: Dockerfile-rpi
  expose:
  - "9200"
  - "9300"
  ports:
  - "9200:9200"
  - "9300:9300"
  volumes_from: ['elasticvolume']
  mem_limit: 1g
logstash:
  build: logstash
  dockerfile: Dockerfile-rpi
  expose:
  - "5000"
  links:
   - elasticsearch:es
  mem_limit: 1g
kibana:
  build: kibana
  dockerfile: Dockerfile-rpi
  expose:
  - "80"
  ports:
  - "8090:80"
graphite:
  image: wgbartley/rpi-graphite-carbon
  ports:
  #keep this port exposed so that grafana can access it from the browser
  - "8080:80"
  #keep this port exposed so that systems with static configuration can access it
  - "2003:2003"
  - "2004:2004"
  expose:
  - "2003"
  - "2004"
  - "8080"
grafana:
  build: grafana
  dockerfile: Dockerfile-rpi
  ports:
  - "8091:80"
  links:
  - graphite
  mem_limit: 56m
mongo:
  hostname: mongo
  image: sponki/rpi-mongo
  volumes:
  - /data/db
  expose:
  - "27017"
  ports:
  - "27017:27017"
mongographite:
  build: mongo-graphite
  dockerfile: Dockerfile-rpi
  links:
  - graphite
  - mongo
  volumes_from: ['lsf']
rabbitmq:
  hostname: rabbitmq
  dockerfile: Dockerfile-rpi
  build: rabbitmq
  ports:
  - "5672:5672"
  - "15672:15672"
redis:
  container_name: redis
  image: hypriot/rpi-redis
  ports:
  - "6379"
