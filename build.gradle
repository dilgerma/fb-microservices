import de.gesellix.gradle.docker.tasks.*
/*
* This build file was auto generated by running the Gradle 'init' task
* by 'martindilger' at '18.01.15 17:15' with Gradle 1.10
*
* This generated file contains a commented-out sample Java project to get you started.
* For more details take a look at the Java Quickstart chapter in the Gradle
* user guide available at http://gradle.org/docs/1.10/userguide/tutorial_java_projects.html
*/

buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id "de.gesellix.docker" version "2015-02-13T20-34-06"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'



ext {
//    localDockerHost = System.env.DOCKER_HOST.replaceAll("^tcp://", "http://")
}

allprojects {

    group = "de.effectivetrainings"
    version = "0.1.0"

    docker {
        def dockerEnv = System.env.DOCKER_HOST;
        dockerHost = dockerEnv ? dockerEnv.replaceAll("^tcp://", "http://") : null
        authConfigPlain = ["username": "dilgerm",
                           "password": "-password-",
                           "email"   : "martin@effectivetrainings.de"]
    }

    repositories {
        // Use 'maven central' for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        mavenCentral()
    }


}

subprojects {

    ext {
        springVersion = '4.1.5.RELEASE'
    };

    apply plugin: "de.gesellix.docker"
    apply plugin: 'idea'
    //because of https://youtrack.jetbrains.com/issue/IDEA-120939
    //and because of https://youtrack.jetbrains.com/issue/IDEA-91952#comment=27-769929
    idea {
        module {
            inheritOutputDirs = true
        }
    }

    task buildImage(type: DockerBuildTask) {
        imageName = "dilgerm/" + project.name
        buildContextDirectory = file('.')
    }
    buildImage.onlyIf { project.file("Dockerfile").exists() }


    task pushImage(type: DockerPushTask) {
        dependsOn buildImage
        repositoryName = "dilgerm/" + project.name
        registry = "http://registry.hub.docker.com"
    }

    pushImage.onlyIf { project.file("Dockerfile").exists() }


}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time

    //download only the jar file for groovy, ignore transitive dependencies.
    //runtime "org.groovy:groovy:2.2.0@jar"

    //project dependency
    //compile project(':shared')

    /**
     * runtime files('libs/a.jar', 'libs/b.jar')
     * runtime fileTree(dir: 'libs', include: '*.jar')
     */

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile "junit:junit:4.11"
}



task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}
